a <- available.packages()
a <- available.packages()
help()
packages()
package
package()
a <-available.package()
a <- available.packages()
head(rownames(a),3)
head(rownames(a),9)
a
head(rownames(c))
head(rownames(c),10)
install.packages("slidify")
install.packages("ggplot2")
install.packages("KernSmooth")
install.packages("ggplot2")
library(KernSmooth)
library(KernSmooth)
git help git
libary(datasets)
library(datasets)
data(iris)
?iris
dim(iris)
summary(iris)
iris
head(iris)
a <- split(iris, iris$Species)
a
ls
b <- a$virginica
b
c <- lapply(b, mean)
c <- lapply(b$Sepal.Length, mean)
c
rm(c)
c
a
b
c <- vector(b$Sepal.Length)
c <- b$Sepal.Length
c
d <- mean(c)
d
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris, 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
?mtcars
mtcars
test1 <- lapply(mtcars, mean)
test1
test2 <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
test2
test3 <- sapply(mtcars, cyl, mean)
test4 <- mean(mtcars$mpg, mtcars$cyl)
test5 <- split(mtcars$mpg, mtcars$cyl)
test5
test6 <- sapply(test5, mean)
test6
26.66364 - 15.10000
test7 <- sapply(split(mtcars$hp, mtcars$cyl), mean)
test7
82.63636 - 209.21429
debug(ls)
ls
ls()
q
?inverse
??inverse
source('~/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(2)
mono <- makeCacheMatrix(2)
stud <- makeCacheMatrix2(2)
cacheSolve(mono)
cacheSolve(stud)
cacheSolve2(stud)
cacheSolve2(stud)
source('~/ProgrammingAssignment2/cachematrix.R')
stud <- makeCacheMatrix2(2)
cacheSolve2(stud)
source('~/ProgrammingAssignment2/cachematrix.R')
stud <- makeCacheMatrix2(2)
cacheSolve2(stud)
cacheSolve2(stud)
??solve
source('~/ProgrammingAssignment2/cachematrix.R')
cacheSolve2(stud)
stud <- makeCacheMatrix2(2)
cacheSolve2(stud)
stud <- makeCacheMatrix2(2)
stud
cacheSolve2(stud)
cacheSolve2(stud)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
stud <- makeCacheMatrix2(2)
source('~/ProgrammingAssignment2/cachematrix.R')
stud <- makeCacheMatrix2(2)
cacheSolve2(stud)
cacheSolve2(stud)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
studly <- makeCacheMatrix3(2)
cacheSolve3(studly)
cacheSolve3(studly)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
sty <- makeCacheMatrix4(2)
cacheSolve4(sty)
source('~/ProgrammingAssignment2/cachematrix.R')
sty <- makeCacheMatrix4(2)
sty
cacheSolve4(sty)
source('~/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix5(2)
to <- makeCacheMatrix5(2)
cacheSolve5(to)
cacheSolve5(to)
source('~/ProgrammingAssignment2/cachematrix.R')
to <- makeCacheMatrix5(2)
cacheSolve5(to)
source('~/ProgrammingAssignment2/cachematrix.R')
to <- makeCacheMatrix5(2)
cacheSolve5(to)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
to <- makeCacheMatrix5(2)
cacheSolve5(to)
cacheSolve5(to)
source('~/ProgrammingAssignment2/cachematrix.R')
to <- makeCacheMatrix5(2)
cacheSolve5(to)
cacheSolve5(to)
source('~/ProgrammingAssignment2/cachematrix.R')
to <- makeCacheMatrix5(2)
cacheSolve5(to)
cacheSolve5(to)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
View(top_counts)
library(swirl)
swirl
swirl()
top_counts_sorted <- arrange(top_counts, count)
top_counts <- filter(pack_sum, count > 679)
play()
top_counts <- filter(pack_sum, count > 679)
nxt()
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, count = desc)
?arrange
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
student3
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
??mutate
library(dplyr)
?mutate
??mutate
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed,status = "passed")
failed <- mutate(failed,status = "failed")
packageVersion('dplyr')
?bind_rows
bind_rows(list(passed, failed))
bind_rows(passed, failed)
sat
?select
submit()
submit()
submit()
?barplot
?plot
?summarise_each
??summarise_each
getwd()
setwd("~/Desktop/Repro/HW1")
getwd()
library(plyr)
library(dplyr)
library(chron)
rawData <- read.csv('activity.csv')
cleanData <- na.omit(rawData)
?ddply
head(cleanData)
str(date)
summary(cleanData)
str(cleanData)
stepsPerDay <-ddply(cleanData, .(date), summarize, sum=sum(steps))
stepsPerDay
str(cleanData)
par(mfrow=c(1,1))
hist(stepsPerDay$sum, main="Number of Steps/Day", xlab="steps", ylab="frequency", length(stepsPerDay$date))
meanDailySteps <-ddply(cleanData, .(date), summarize, mean=mean(steps))
medianDailySteps <-ddply(cleanData, .(date), summarize, median=quantile(steps,1))
meanMedianDailySteps <- merge(meanDailySteps,medianDailySteps,by="date")
meanMedianDailySteps
meanStepsPerInterval <- ddply(cleanData, .(interval), summarize, mean=mean(steps))
par(mfrow=c(1,1))
plot(meanStepsPerInterval$interval, meanStepsPerInterval$mean, type="l", main="Average Steps Per Interval", ylab="# of steps", xlab="time (in 5 min intervals)")
max(meanStepsPerInterval$mean)
meanStepsPerInterval[which(meanStepsPerInterval$mean == max(meanStepsPerInterval$mean)), ]
sum(is.na(rawData$steps))
modData <- rawData
modData$steps[which(is.na(rawData$steps))] <- mean(modData$steps, na.rm = TRUE)
stepsPerDayMod <-ddply(modData, .(date), summarize, sum=sum(steps))
par(mfrow=c(1,2))
hist(stepsPerDayMod$sum, main="Number of Steps/Day \n(Artificial NA values added)", xlab="steps", ylab="frequency", ylim=c(0,10), length(stepsPerDayMod$date))
hist(stepsPerDayMod$sum, main="Number of Steps/Day \n(Artificial NA values added)", xlab="steps", ylab="frequency", ylim=c(0,12), length(stepsPerDayMod$date))
hist(stepsPerDayMod$sum, main="Number of Steps/Day \n(Artificial NA values added)", xlab="steps", ylab="frequency", ylim=c(0,12), length(stepsPerDayMod$date))
hist(stepsPerDay$sum, main="Number of Steps/Day \n(Original Plot)", xlab="steps", ylab="frequency", ylim=c(0,12), length(stepsPerDay$date))
par(mfrow=c(1,1))
meanDailyStepsMod <-ddply(modData, .(date), summarize, mean=mean(steps))
medianDailyStepsMod <-ddply(modData, .(date), summarize, median=quantile(steps,1))
meanMedianDailyStepsMod <- merge(meanDailyStepsMod,medianDailyStepsMod,by="date")
meanMedianDailyStepsMod
meanMedianDailySteps
test <- meanMedianDailyStepsMod[0:53]
modData2 <- modData
modData2
str(modData2)
modData2$weekend <- FALSE
str(modData2)
modData2$weekend[which(is.weekend(modData$date))] <- TRUE
str(modData2)
head(modData2)
head(modData2, 100)
head(modData2, c(200:300))
?head
weekEnd <- modData2[modData2$weekend == TRUE, ]
weekDay <- modData2[modData2$weekend == FALSE, ]
weekEndMeanSteps <- ddply(weekEnd, .(interval), summarize, mean=mean(steps))
weekDayMeanSteps <- ddply(weekDay, .(interval), summarize, mean=mean(steps))
par(mfrow=c(2,1))
plot(weekEndMeanSteps$interval, weekEndMeanSteps$mean, type="l", main="Weekend", ylab="# of steps", xlab="time (in 5 min intervals)")
plot(weekDayMeanSteps$interval, weekDayMeanSteps$mean, type="l", main="Weekday", ylab="# of steps", xlab="time (in 5 min intervals)")
par(mfrow=c(1,1))
setwd("~/Desktop/Repro/HW1/RepData_PeerAssessment1")
getwd()
